use std::ops::{Add, Mul, MulAssign};

use super::*;


lazy_static! {
    /// powers of g =1945 mod q
    static ref pow1945: [Scalar; 2048] = {
        let mut tmp = [0; 2048];
        let mut x = 1;
        for p in tmp.iter_mut() {
            *p = x;
            x = (1945 * x) % HILA5_Q;
        }
        tmp
    };
}

// // Vector addition : d = a + b .
impl<'a, 'b> Add<&'a Vector> for &'b Vector {
    type Output = Vector;

    fn add(self, rhs: &Vector) -> Self::Output {
        let mut d = [0; HILA5_N];
        for (i, (ai, bi)) in self.0.iter().zip(rhs.0.iter()).enumerate() {
            d[i] = (ai + bi) % HILA5_Q;
        }

        Vector(d)
    }
}

// Vector multiplication : v = c * u .
impl<'a> Mul<Scalar> for &'a Vector {
    type Output = Vector;

    fn mul(self, c: Scalar) -> Self::Output {
        let mut v = [0; HILA5_N];
        for (i, ui) in self.0.iter().enumerate() {
            v[i] = (ui * c) % HILA5_Q;
        }

        Vector(v)
    }
}

// Vector multiplication : v = c * v .
impl MulAssign<Scalar> for Vector {
    fn mul_assign(&mut self, c: Scalar) {
        for vi in self.0.iter_mut() {
            *vi *= c % HILA5_Q;
        }
    }
}

/// Slow polynomial ring multiplication : d = a * b
impl<'a, 'b> Mul<&'a Vector> for &'b Vector {
    type Output = Vector;

    fn mul(self, b: &Vector) -> Self::Output {
        let a = self;
        let mut d = [0; HILA5_N];

        for (i, di) in d.iter_mut().enumerate() {
            let mut x = 0;
            for (aj, bij) in a.0.iter().zip(b.0[..(i+1)].iter().rev()) {
                x = (x + aj * bij) % HILA5_Q;
            }
            for (aj, bij) in a.0.iter().skip(i + 1).zip(b.0.iter().rev()) {
                x +=  HILA5_Q - ((aj * bij) % HILA5_Q);
            }
            *di = x % HILA5_Q;
        }
        Vector(d)
    }
}

/// reverse order of ten bits i . e . 0 x200 -> 0 x001 and vice versa
pub fn bitrev10(x: usize) -> usize {
    let mut x = x & 0x3ff;
    x = (x << 5) | (x >> 5);
    let mut t = (x ^ (x >> 4)) & 0x021;
    x ^= t ^ (t << 4);
    t = (x ^ (x >> 2)) & 0x042;
    x ^= t ^ (t << 2);
    return x & 0x3ff;
}

/// Slow number theoretic transform and scaling : d = c * NTT ( v ) .
pub fn slow_ntt(v: &Vector, c: Scalar) -> NttVector {
    let mut d = [0; HILA5_N];
    for (i, di) in d.iter_mut().enumerate() {
        let r = (2 * bitrev10(i) + 1) as Scalar;
        let mut x = 0;
        let mut k: Scalar = 0;
        for vj in v.0.iter() {
            x = (x + vj * pow1945[k as usize]) % HILA5_Q;
            k = (k + r) & 0x7ff;
        }
        *di = (c * x) % HILA5_Q;
    }
    NttVector(d)
}

/// Slow inverse number theoretic transform : d = NTT ^ -1( v ) .
pub fn slow_intt(v: &NttVector) -> Vector {
    let mut d = [0; HILA5_N];
    for (i, vi) in v.0.iter().enumerate() {
        let r = (2 * bitrev10(i) + 1) as Scalar;
        let mut k: Scalar = 0;
        for dj in d.iter_mut() {
            *dj = (*dj + vi * pow1945[k as usize]) % HILA5_Q;
            k = (k - r) & 0x7ff;
        }
    }
    Vector(d)
}

/// Pointwise multiplication : d = a (*) b .
impl<'a, 'b> Mul<&'a NttVector> for &'b NttVector {
    type Output = NttVector;

    fn mul(self, b: &NttVector) -> Self::Output {
        let a = self;
        let mut d = [0; HILA5_N];
        for (di, (ai, bi)) in d.iter_mut().zip(a.0.iter().zip(b.0.iter())) {
            *di = (ai * bi) % HILA5_Q;
        }
        NttVector(d)
    }
}




#[cfg(test)]
mod test {
    use ring::rand::{SecureRandom, SystemRandom};

    use super::*;

    #[test]
    fn test_bitflip() {
        assert_eq!(bitrev10(0x200), 0x001);
    }

    #[test]
    fn test_vector() {

        let fibv = Vector([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,
            610, 987, 1597, 2584, 4181, 6765, 10946, 5422, 4079, 9501, 1291,
            10792, 12083, 10586, 10380, 8677, 6768, 3156, 9924, 791, 10715,
            11506, 9932, 9149, 6792, 3652, 10444, 1807, 12251, 1769, 1731, 3500,
            5231, 8731, 1673, 10404, 12077, 10192, 9980, 7883, 5574, 1168, 6742,
            7910, 2363, 10273, 347, 10620, 10967, 9298, 7976, 4985, 672, 5657,
            6329, 11986, 6026, 5723, 11749, 5183, 4643, 9826, 2180, 12006, 1897,
            1614, 3511, 5125, 8636, 1472, 10108, 11580, 9399, 8690, 5800, 2201,
            8001, 10202, 5914, 3827, 9741, 1279, 11020, 10, 11030, 11040, 9781,
            8532, 6024, 2267, 8291, 10558, 6560, 4829, 11389, 3929, 3029, 6958,
            9987, 4656, 2354, 7010, 9364, 4085, 1160, 5245, 6405, 11650, 5766,
            5127, 10893, 3731, 2335, 6066, 8401, 2178, 10579, 468, 11047, 11515,
            10273, 9499, 7483, 4693, 12176, 4580, 4467, 9047, 1225, 10272,
            11497, 9480, 8688, 5879, 2278, 8157, 10435, 6303, 4449, 10752, 2912,
            1375, 4287, 5662, 9949, 3322, 982, 4304, 5286, 9590, 2587, 12177,
            2475, 2363, 4838, 7201, 12039, 6951, 6701, 1363, 8064, 9427, 5202,
            2340, 7542, 9882, 5135, 2728, 7863, 10591, 6165, 4467, 10632, 2810,
            1153, 3963, 5116, 9079, 1906, 10985, 602, 11587, 12189, 11487,
            11387, 10585, 9683, 7979, 5373, 1063, 6436, 7499, 1646, 9145, 10791,
            7647, 6149, 1507, 7656, 9163, 4530, 1404, 5934, 7338, 983, 8321,
            9304, 5336, 2351, 7687, 10038, 5436, 3185, 8621, 11806, 8138, 7655,
            3504, 11159, 2374, 1244, 3618, 4862, 8480, 1053, 9533, 10586, 7830,
            6127, 1668, 7795, 9463, 4969, 2143, 7112, 9255, 4078, 1044, 5122,
            6166, 11288, 5165, 4164, 9329, 1204, 10533, 11737, 9981, 9429, 7121,
            4261, 11382, 3354, 2447, 5801, 8248, 1760, 10008, 11768, 9487, 8966,
            6164, 2841, 9005, 11846, 8562, 8119, 4392, 222, 4614, 4836, 9450,
            1997, 11447, 1155, 313, 1468, 1781, 3249, 5030, 8279, 1020, 9299,
            10319, 7329, 5359, 399, 5758, 6157, 11915, 5783, 5409, 11192, 4312,
            3215, 7527, 10742, 5980, 4433, 10413, 2557, 681, 3238, 3919, 7157,
            11076, 5944, 4731, 10675, 3117, 1503, 4620, 6123, 10743, 4577, 3031,
            7608, 10639, 5958, 4308, 10266, 2285, 262, 2547, 2809, 5356, 8165,
            1232, 9397, 10629, 7737, 6077, 1525, 7602, 9127, 4440, 1278, 5718,
            6996, 425, 7421, 7846, 2978, 10824, 1513, 48, 1561, 1609, 3170,
            4779, 7949, 439, 8388, 8827, 4926, 1464, 6390, 7854, 1955, 9809,
            11764, 9284, 8759, 5754, 2224, 7978, 10202, 5891, 3804, 9695, 1210,
            10905, 12115, 10731, 10557, 8999, 7267, 3977, 11244, 2932, 1887,
            4819, 6706, 11525, 5942, 5178, 11120, 4009, 2840, 6849, 9689, 4249,
            1649, 5898, 7547, 1156, 8703, 9859, 6273, 3843, 10116, 1670, 11786,
            1167, 664, 1831, 2495, 4326, 6821, 11147, 5679, 4537, 10216, 2464,
            391, 2855, 3246, 6101, 9347, 3159, 217, 3376, 3593, 6969, 10562,
            5242, 3515, 8757, 12272, 8740, 8723, 5174, 1608, 6782, 8390, 2883,
            11273, 1867, 851, 2718, 3569, 6287, 9856, 3854, 1421, 5275, 6696,
            11971, 6378, 6060, 149, 6209, 6358, 278, 6636, 6914, 1261, 8175,
            9436, 5322, 2469, 7791, 10260, 5762, 3733, 9495, 939, 10434, 11373,
            9518, 8602, 5831, 2144, 7975, 10119, 5805, 3635, 9440, 786, 10226,
            11012, 8949, 7672, 4332, 12004, 4047, 3762, 7809, 11571, 7091, 6373,
            1175, 7548, 8723, 3982, 416, 4398, 4814, 9212, 1737, 10949, 397,
            11346, 11743, 10800, 10254, 8765, 6730, 3206, 9936, 853, 10789,
            11642, 10142, 9495, 7348, 4554, 11902, 4167, 3780, 7947, 11727,
            7385, 6823, 1919, 8742, 10661, 7114, 5486, 311, 5797, 6108, 11905,
            5724, 5340, 11064, 4115, 2890, 7005, 9895, 4611, 2217, 6828, 9045,
            3584, 340, 3924, 4264, 8188, 163, 8351, 8514, 4576, 801, 5377, 6178,
            11555, 5444, 4710, 10154, 2575, 440, 3015, 3455, 6470, 9925, 4106,
            1742, 5848, 7590, 1149, 8739, 9888, 6338, 3937, 10275, 1923, 12198,
            1832, 1741, 3573, 5314, 8887, 1912, 10799, 422, 11221, 11643, 10575,
            9929, 8215, 5855, 1781, 7636, 9417, 4764, 1892, 6656, 8548, 2915,
            11463, 2089, 1263, 3352, 4615, 7967, 293, 8260, 8553, 4524, 788,
            5312, 6100, 11412, 5223, 4346, 9569, 1626, 11195, 532, 11727, 12259,
            11697, 11667, 11075, 10453, 9239, 7403, 4353, 11756, 3820, 3287,
            7107, 10394, 5212, 3317, 8529, 11846, 8086, 7643, 3440, 11083, 2234,
            1028, 3262, 4290, 7552, 11842, 7105, 6658, 1474, 8132, 9606, 5449,
            2766, 8215, 10981, 6907, 5599, 217, 5816, 6033, 11849, 5593, 5153,
            10746, 3610, 2067, 5677, 7744, 1132, 8876, 10008, 6595, 4314, 10909,
            2934, 1554, 4488, 6042, 10530, 4283, 2524, 6807, 9331, 3849, 891,
            4740, 5631, 10371, 3713, 1795, 5508, 7303, 522, 7825, 8347, 3883,
            12230, 3824, 3765, 7589, 11354, 6654, 5719, 84, 5803, 5887, 11690,
            5288, 4689, 9977, 2377, 65, 2442, 2507, 4949, 7456, 116, 7572, 7688,
            2971, 10659, 1341, 12000, 1052, 763, 1815, 2578, 4393, 6971, 11364,
            6046, 5121, 11167, 3999, 2877, 6876, 9753, 4340, 1804, 6144, 7948,
            1803, 9751, 11554, 9016, 8281, 5008, 1000, 6008, 7008, 727, 7735,
            8462, 3908, 81, 3989, 4070, 8059, 12129, 7899, 7739, 3349, 11088,
            2148, 947, 3095, 4042, 7137, 11179, 6027, 4917, 10944, 3572, 2227,
            5799, 8026, 1536, 9562, 11098, 8371, 7180, 3262, 10442, 1415, 11857,
            983, 551, 1534, 2085, 3619, 5704, 9323, 2738, 12061, 2510, 2282,
            4792, 7074, 11866, 6651, 6228, 590, 6818, 7408, 1937, 9345, 11282,
            8338, 7331, 3380, 10711, 1802, 224, 2026, 2250, 4276, 6526, 10802,
            5039, 3552, 8591, 12143, 8445, 8299, 4455, 465, 4920, 5385, 10305,
            3401, 1417, 4818, 6235, 11053, 4999, 3763, 8762, 236, 8998, 9234,
            5943, 2888, 8831, 11719, 8261, 7691, 3663, 11354, 2728, 1793, 4521,
            6314, 10835, 4860, 3406, 8266, 11672, 7649, 7032, 2392, 9424, 11816,
            8951, 8478, 5140, 1329, 6469, 7798, 1978, 9776, 11754, 9241, 8706,
            5658, 2075, 7733, 9808, 5252, 2771, 8023, 10794, 6528, 5033, 11561,
            4305, 3577, 7882, 11459, 7052, 6222, 985, 7207, 8192, 3110, 11302,
            2123, 1136, 3259, 4395, 7654, 12049, 7414, 7174, 2299, 9473, 11772,
            8956, 8439, 5106, 1256, 6362, 7618, 1691, 9309, 11000, 8020, 6731,
            2462, 9193, 11655, 8559, 7925, 4195, 12120, 4026, 3857, 7883, 11740,
            7334, 6785, 1830, 8615, 10445, 6771, 4927, 11698, 4336, 3745, 8081,
            11826, 7618, 7155, 2484, 9639, 12123, 9473, 9307, 6491, 3509, 10000,
            1220, 11220, 151, 11371, 11522, 10604, 9837, 8152, 5700, 1563, 7263,
            8826, 3800, 337, 4137, 4474, 8611, 796, 9407, 10203, 7321, 5235,
            267, 5502, 5769, 11271, 4751, 3733, 8484, 12217, 8412, 8340, 4463,
            514, 4977, 5491, 10468, 3670, 1849, 5519, 7368, 598, 7966, 8564,
            4241, 516, 4757, 5273, 10030, 3014, 755, 3769, 4524, 8293, 528,
            8821, 9349]
        );

        let fib_ntt = slow_ntt(&fibv, 1);
        assert_eq!(&fib_ntt.0[..5], &[10951, 5645, 3732, 4089, 442]);
        assert_eq!(&fib_ntt.0[HILA5_N - 5..], &[10237, 754, 6341, 4211, 7921]);
        let rec = slow_intt(&fib_ntt);
        assert_eq!(&rec.0[..5], &[0, 1024, 1024, 2048, 3072]);
        assert_eq!(&rec.0[HILA5_N - 5..], &[11912, 333, 12245, 289, 245]);
    }

    #[test]
    fn random_test() {
        let rng = SystemRandom::new();
        let mut rand_bytes = [0u8; 4 * HILA5_N];

        for _ in 0..10 {
            rng.fill(&mut rand_bytes).unwrap();
            let mut a = [0; HILA5_N];
            let mut b = [0; HILA5_N];
            
            for i in 0..HILA5_N {
                let ai = ((rand_bytes[2*i] as Scalar) << 8  | (rand_bytes[2*i + 1]) as Scalar) % HILA5_Q;
                let bi = ((rand_bytes[HILA5_N + 2*i] as Scalar) << 8 | (rand_bytes[HILA5_N + 2*i + 1]) as Scalar) % HILA5_Q;
                a[i] = ai as Scalar;
                b[i] = bi as Scalar;
            }
            let a = Vector(a);
            let b = Vector(b);

            let x: Vector = &a * &b; // x is a * b
            let t = slow_ntt(&a, 1); // t is NTT(a)
            let y = slow_ntt(&b, 12277); // y is NTT(n) / 1024
            let t: NttVector = &t * &y; // t is NTT(a) * NTT(b) / 1024
            let y = slow_intt(&t); // y is a * b

            assert_eq!( &x.0[..], &y.0[..] );
        }
    }
}